//apply plugin: 'com.android.application'
//apply plugin: 'realm-android'
plugins {
    id 'com.android.application'
    id 'kotlin-android'
}
android {
    namespace 'com.anonimeact.sqliteencryptor'
    compileSdk 33
    defaultConfig {
        applicationId "com.anonimeact.sqliteencryptor"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildToolsVersion '30.0.3'
    ndkVersion '25.2.9519653'

//    // APK splitting
//    splits {
//        abi {
//            // Enable APK splitting wrt architecture
//            enable true
//
//            // Reset the architectures for which you need to build the APKs for
//            reset()
//
//            // Include the architectures for which Gradle is building APKs
//            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
//
//            // Set this to false if you don't want an APK that has native code for all architectures
//            universalApk false
//        }
//    }
//
//    // Assign codes to each architecture
//    project.ext.versionCodes = ['x86': 0, 'x86_64': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3]
//
//    // Add the architecture-specific codes above to base version code, i.e. the version code specified in the defaultConfig{} block
//    // Example: 2000 is the base version code -> 2000 (x86), 2001 (x86_64), 2002 (armeabi-v7a) & 2003 (arm64-v8a) would be the version codes for the generated APK files
//    android.applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            output.versionCodeOverride = project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1 + android.defaultConfig.versionCode
//        }
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.anonimeact:utils:1.1.14'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.jiechic.android.library:snappy-android:1.1.7'
    implementation 'com.scottyab:aescrypt:0.0.1'
    implementation 'androidx.core:core-ktx:1.10.1'

    implementation(project(':snappy-ed'))
}
